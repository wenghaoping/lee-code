// 滑动窗口算法的思路是这样：

// 1、我们在字符串S中使用双指针中的左右指针技巧，初始化left = right = 0，把索引左闭右开区间[left, right)称为一个「窗口」。

// 2、我们先不断地增加right指针扩大窗口[left, right)，直到窗口中的字符串符合要求（包含了T中的所有字符）。

// 3、此时，我们停止增加right，转而不断增加left指针缩小窗口[left, right)，直到窗口中的字符串不再符合要求（不包含T中的所有字符了）。同时，每次增加left，我们都要更新一轮结果。

// 4、重复第 2 和第 3 步，直到right到达字符串S的尽头。

// 这个思路其实也不难，第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解，也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动，这就是「滑动窗口」这个名字的来历。

// 下面画图理解一下，needs和window相当于计数器，分别记录T中字符出现次数和「窗口」中的相应字符的出现次数。




// 1、当移动right扩大窗口，即加入字符时，应该更新哪些数据？

// 2、什么条件下，窗口应该暂停扩大，开始移动left缩小窗口？

// 3、当移动left缩小窗口，即移出字符时，应该更新哪些数据？

// 4、我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？

// 如果一个字符进入窗口，应该增加window计数器；如果一个字符将移出窗口的时候，
// 应该减少window计数器；当valid满足need时应该收缩窗口；应该在收缩窗口的时候更新最终结果。

