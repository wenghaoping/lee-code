/**
 * @param {number[][]} grid
 * @return {number}
 */
//  var maxAreaOfIsland = function(grid) {
//      let maxLand = 0;
//      for (let i = 0; i < grid.length; i++) {

//      }
    
// };
// 遍历grid得到每个位置岛屿面积的最大值，返回一个max
// 搜索函数-递归实现
// 判断边界，若不在边界内，返回0岛屿;
// 否则为1，递归计算上下左右是否为1，cnt计数岛屿面积
// 判断完每个位置需要将其置0(grid[i][j]=0)
const maxAreaOfIsland = function (grid) {
    const x = grid.length; // 8
    const y = grid[0].length; // 13
    let max = 0;
    for (let i = 0; i < x; i++) {
        for (let j = 0; j < y; j++) {
            if (grid[i][j] == 1) {
                max = Math.max(max, cntArea(grid, i, j, x, y));
            }
        }
    }
    return max;
};
const cntArea = (grid, i, j, x, y) => {
    // i一直减直到小于0，i到了X的边界，j一直减直到小于0，j到了Y的边界，或者当前值为0，就是当前为水。
    // 判断上下左右节点的时候，一旦判断是0，就直接return了，不会一直递归下去。
    if (i < 0 || i >= x || j < 0 || j >= y || grid[i][j] == 0) {
        return 0
    };
    // 进入这个函数，所以默认是1。
    let cnt = 1;
    // 访问过之后，直接置为0。
    grid[i][j] = 0;
    cnt += cntArea(grid, i + 1, j, x, y); // 上节点
    cnt += cntArea(grid, i - 1, j, x, y); // 下节点
    cnt += cntArea(grid, i, j + 1, x, y); // 右节点
    cnt += cntArea(grid, i, j - 1, x, y); // 左节点
    return cnt;
};
// console.log(maxAreaOfIsland(
// [[0,0,1,0,0,0,0,1,0,0,0,0,0],
// [0,0,0,0,0,0,0,1,1,1,0,0,0],
// [0,1,1,0,1,0,0,0,0,0,0,0,0],
// [0,1,0,0,1,1,0,0,1,0,1,0,0],
// [0,1,0,0,1,1,0,0,1,1,1,0,0],
// [0,0,0,0,0,0,0,0,0,0,1,0,0],
// [0,0,0,0,0,0,0,1,1,1,0,0,0],
// [0,0,0,0,0,0,0,1,1,0,0,0,0]]));
console.log(maxAreaOfIsland(
    [[0,0,1,0,0],
    [0,0,1,1,0]]));
// 给定一个包含了一些 0 和 1 的非空二维数组 grid 。
// 一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，
// 这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。
// 找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)

// 示例 1:
// [[0,0,1,0,0,0,0,1,0,0,0,0,0],
//  [0,0,0,0,0,0,0,1,1,1,0,0,0],
//  [0,1,1,0,1,0,0,0,0,0,0,0,0],
//  [0,1,0,0,1,1,0,0,1,0,1,0,0],
//  [0,1,0,0,1,1,0,0,1,1,1,0,0],
//  [0,0,0,0,0,0,0,0,0,0,1,0,0],
//  [0,0,0,0,0,0,0,1,1,1,0,0,0],
//  [0,0,0,0,0,0,0,1,1,0,0,0,0]]
// 对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。

// 示例 2:
// [[0,0,0,0,0,0,0,0]]
// 对于上面这个给定的矩阵, 返回 0。
// 注意: 给定的矩阵grid 的长度和宽度都不超过 50。